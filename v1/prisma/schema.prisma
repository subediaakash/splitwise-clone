// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ===========================
 * USER & AUTH MODELS
 * ===========================
 */

 

model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  sessions      Session[]
  accounts      Account[]
  groupMembers  GroupMember[]
  expenses      Expense[]            @relation("CreatedExpenses")
  expenseShares ExpenseParticipant[]
  payments      Payment[]            @relation("UserPayments")

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

/**
 * ===========================
 * GROUP & MEMBERSHIP MODELS
 * ===========================
 */

enum GroupRole {
  CREATOR
  MEMBER
}

enum Currency {
  USD
  EUR
  INR
  GBP
  OTHER
}

enum SettlementStatus {
  CLEAR
  PARTIALLY_CLEAR
  UNPAID
}

model Group {
  id               String           @id @default(uuid())
  isDeleted        Boolean          @default(false)
  deletedAt        DateTime?
  name             String
  description      String?
  image            String?
  settlementStatus SettlementStatus @default(UNPAID)
  currency         Currency         @default(INR)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  groupMembers GroupMember[]
  expenses     Expense[]
  payments     Payment[]

  @@map("group")
}

model GroupMember {
  id       String    @id @default(uuid())
  groupId  String
  userId   String
  role     GroupRole @default(MEMBER)
  joinedAt DateTime  @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId]) // prevents duplicates
  @@index([userId])
  @@map("group_member")
}




/**
 * ===========================
 * EXPENSE & SPLITTING MODELS
 * ===========================
 */

enum ExpenseSplitType {
  EQUAL // Everyone pays equal share
  PERCENTAGE // Percent split
  EXACT // Custom amounts per participant
}

enum ExpenseType{
  PERSONAL 
  GROUP
}

model Expense {
  id          String           @id @default(uuid())
  groupId     String? // null if it's a personal expense
  expenseType ExpenseType @default(GROUP)
  description String
  amount      Decimal          @db.Decimal(10, 2)
  currency    Currency         @default(INR)
  splitType   ExpenseSplitType @default(EQUAL)
  createdById String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  totalExpenseSettlementStatus SettlementStatus @default(UNPAID)

  // Relations
  group        Group?               @relation(fields: [groupId], references: [id])
  createdBy    User                 @relation("CreatedExpenses", fields: [createdById], references: [id])
  participants ExpenseParticipant[]

  @@index([groupId])
  @@map("expense")
}

model ExpenseParticipant {
  id        String  @id @default(uuid())
  expenseId String
  userId    String
  share     Decimal @db.Decimal(10, 2) // exact share owed by user
  totalUserSettlementStatus SettlementStatus @default(UNPAID)
  expense Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([expenseId, userId]) // each user once per expense
  @@map("expense_participant")
}

/**
 * ===========================
 * PAYMENT / RAZORPAY INTEGRATION
 * ===========================
 */

model Payment {
  id                String   @id @default(uuid())
  groupId           String
  userId            String
  totalAmount       Decimal  @db.Decimal(10, 2)
  currency          Currency @default(INR)
  status            String   @default("created") // created, captured, failed, refunded
  razorpayOrderId   String? // from Razorpay
  razorpayPaymentId String? // from Razorpay
  razorpaySignature String? // for signature verification
  attachmentUrl     String? // optional receipt upload
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  payer User  @relation("UserPayments", fields: [userId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([userId])
  @@map("payment")
}
